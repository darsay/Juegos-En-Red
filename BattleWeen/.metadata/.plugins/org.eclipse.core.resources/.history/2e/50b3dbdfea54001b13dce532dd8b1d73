package es.urjc.JER.BattleWeenServer;

import org.springframework.web.bind.annotation.RestController;

import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;

@RestController
@RequestMapping("/users")
public class BattleWeenController {

	Map<Long, User> users = new ConcurrentHashMap<>(); 
	AtomicLong nextId = new AtomicLong(0);
	
	@GetMapping(value = "/bichoo")
	public Jugador bixitoo() {
		return new Jugador("Cr7", 7, true);
	}
	
	@GetMapping(value = "/mesirve")
	public Jugador d10s() {
		return new Jugador("messii", 10, false);
	}
	
	@GetMapping
	public Collection<Jugador> items() {
		return jugones.values();
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Jugador nuevoJugon(@RequestBody Jugador jugon) {
		long id = nextId.incrementAndGet();
		jugon.setId(id);
		jugones.put(id, jugon);

		return jugon;
	}
	
	/*@GetMapping(value="/{id}")
	public ResponseEntity<Jugador> getJugon(@PathVariable long id) {
		
		Jugador jugador = jugones.get(id);
				
		if (jugador != null) {
			return new ResponseEntity<>(jugador, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}		
		
	}*/
	
	@GetMapping(value = "/{nombre}")
	public ResponseEntity<Jugador> getJugon(@PathVariable String nombre) {
		
		boolean found = false;
		long i = 1;
		Jugador jugador = null;
		
		while(i<=jugones.size() && !found) {
			jugador = jugones.get(i);
			
			if(jugador.getNombre().equals(nombre)) {
				found = true;
			}
			i++;
		}
		
				
		if (jugador != null && found) {
			return new ResponseEntity<>(jugador, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}		
		
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Jugador> borraItem(@PathVariable long id) {

		Jugador savedItem = jugones.get(id);

		if (savedItem != null) {
			jugones.remove(savedItem.getId());
			return new ResponseEntity<>(savedItem, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	
	@PutMapping("/{id}")
    public ResponseEntity<Jugador> actulizaItem(@PathVariable long id, @RequestBody Jugador jugonActualizado) {

        Jugador savedItem = jugones.get(id);

        if (savedItem != null) {
            jugonActualizado.setId(id);
            jugones.put(id, jugonActualizado);

            return new ResponseEntity<>(jugonActualizado, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}
